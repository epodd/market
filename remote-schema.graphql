# This file was generated based on ".graphqlconfig". Do not edit manually.

schema {
    query: Query
    mutation: Mutation
}

type CartResponseType {
    products: [String]!
    userId: String!
}

type ErrorType {
    message: String!
    path: String!
}

type ImageType {
    key: String!
    location: String!
}

type LoginType {
    ok: Boolean!
    user: UserAuthorizeType!
}

type LogoutResponseType {
    userId: String!
}

type Mutation {
    addProduct(data: ProductInputType!): ProductResponseType!
    addProductToCart(products: [String!]!, userId: String!): CartResponseType
    login(email: String!, password: String!): UserResponseType!
    logout(userId: String!): LogoutResponseType!
    registration(email: String!, name: String!, password: String!): UserResponseType!
}

type ProductResponseType {
    color: String!
    createAt: String!
    description: String!
    gender: String!
    id: String!
    images: [ImageType!]!
    kid: Boolean!
    name: String!
    price: String!
    productDetail: String!
    sizes: [String!]!
    typeProduct: [String!]!
    variantsColor: [VariantColorType]!
}

type Query {
    getCart(userId: String!): CartResponseType
    getProductByFilter(filter: FilterInputType!): [ProductResponseType]!
    getProductByIds(ids: [String!]!): [ProductResponseType]!
    getProductByName(name: String!): [ProductResponseType]!
    getProducts(filter: FilterInputType): [ProductResponseType]!
    getUser(userId: String!): UserResponseType
    refreshToken: RefreshTokenResponseType
}

type RefreshTokenResponseType {
    accessToken: String!
    refreshToken: String!
}

type UserAuthorizeType {
    accessToken: String!
    email: String!
    id: String!
    name: String!
    refreshToken: String!
    role: String!
}

type UserResponseType {
    errors: [ErrorType!]
    ok: Boolean!
    user: UserAuthorizeType!
}

type UserType {
    email: String!
    id: String!
    name: String!
    role: String!
}

type VariantColorType {
    color: String!
    id: String!
}

scalar Upload

input ColorInputType {
    color: String!
    id: String!
    name: String!
}

input File {
    encoding: String!
    filename: String!
    id: ID!
    mimetype: String!
}

input FilterInputType {
    categoryId: String!
    colors: [ColorInputType]
}

input ProductInputType {
    color: String!
    description: String!
    gender: String!
    imageFiles: [File!]!
    kid: Boolean!
    name: String!
    price: String!
    productDetail: String!
    sizes: [SizeType]!
    typeProduct: [String!]!
    variantsColor: [VariantColorInputType]
}

input SizeType {
    id: String!
    name: String!
}

input VariantColorInputType {
    color: String!
    id: String!
}
